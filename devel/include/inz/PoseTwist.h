// Generated by gencpp from file inz/PoseTwist.msg
// DO NOT EDIT!


#ifndef INZ_MESSAGE_POSETWIST_H
#define INZ_MESSAGE_POSETWIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace inz
{
template <class ContainerAllocator>
struct PoseTwist_
{
  typedef PoseTwist_<ContainerAllocator> Type;

  PoseTwist_()
    : position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , velocity_x(0.0)
    , velocity_y(0.0)
    , velocity_z(0.0)  {
    }
  PoseTwist_(const ContainerAllocator& _alloc)
    : position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , velocity_x(0.0)
    , velocity_y(0.0)
    , velocity_z(0.0)  {
  (void)_alloc;
    }



   typedef float _position_x_type;
  _position_x_type position_x;

   typedef float _position_y_type;
  _position_y_type position_y;

   typedef float _position_z_type;
  _position_z_type position_z;

   typedef float _velocity_x_type;
  _velocity_x_type velocity_x;

   typedef float _velocity_y_type;
  _velocity_y_type velocity_y;

   typedef float _velocity_z_type;
  _velocity_z_type velocity_z;




  typedef boost::shared_ptr< ::inz::PoseTwist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::inz::PoseTwist_<ContainerAllocator> const> ConstPtr;

}; // struct PoseTwist_

typedef ::inz::PoseTwist_<std::allocator<void> > PoseTwist;

typedef boost::shared_ptr< ::inz::PoseTwist > PoseTwistPtr;
typedef boost::shared_ptr< ::inz::PoseTwist const> PoseTwistConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::inz::PoseTwist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::inz::PoseTwist_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace inz

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'inz': ['/home/leszek/armulti_simulator_ws/src/inz/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::inz::PoseTwist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inz::PoseTwist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inz::PoseTwist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inz::PoseTwist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inz::PoseTwist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inz::PoseTwist_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::inz::PoseTwist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a09e933f209950ba0d299b5621ed0ec";
  }

  static const char* value(const ::inz::PoseTwist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a09e933f209950bULL;
  static const uint64_t static_value2 = 0xa0d299b5621ed0ecULL;
};

template<class ContainerAllocator>
struct DataType< ::inz::PoseTwist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "inz/PoseTwist";
  }

  static const char* value(const ::inz::PoseTwist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::inz::PoseTwist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 position_x\n\
float32 position_y\n\
float32 position_z\n\
float32 velocity_x\n\
float32 velocity_y\n\
float32 velocity_z\n\
";
  }

  static const char* value(const ::inz::PoseTwist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::inz::PoseTwist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.velocity_x);
      stream.next(m.velocity_y);
      stream.next(m.velocity_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseTwist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::inz::PoseTwist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::inz::PoseTwist_<ContainerAllocator>& v)
  {
    s << indent << "position_x: ";
    Printer<float>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<float>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<float>::stream(s, indent + "  ", v.position_z);
    s << indent << "velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_x);
    s << indent << "velocity_y: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_y);
    s << indent << "velocity_z: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INZ_MESSAGE_POSETWIST_H
